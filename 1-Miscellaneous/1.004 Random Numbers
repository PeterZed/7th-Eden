var randomNumbersPool = []; // Pool used for all probability calculations.

/*
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

https://developer.mozilla.org/en-US/docs/Web/API/RandomSource/getRandomValues

In order to convert to a random number between 0 and 1, it was necessary to use two arrays:
The global randomPool, and the local randomNumbers. The randomNumbers array is an unsigned integer
array, so it stores any decimal values as integers. Thus, the quotient becomes 0 if assigned to
the randomNumbers Uint32Array, but remains a number between 0 and 1, inclusive, for the
randomPool array.

A CSPRNG was chosen over Math.random() to better emulate the true unpredictability of real world
physics at its core, in spite of being slightly slower and more cumbersome to work with efficiently
than Math.random(). The Uint32 Array was chosen over smaller Uint arrays because it better
approximates a continuous scale rather than a discrete one. However, given the number of bits
needed to make each Uint32's numbers, the overall number of numbers available is lower because
there's a limit to the number of bits of entropy available to 'crypto.getRandomValues' per use.
*/
function generateRandom() {
  // Generates a new list of 16384 cryptographically secure pseudo random numbers from 0 to 1
  var randomNumbers = window.crypto.getRandomValues(new Uint32Array(16384));
  
  for (var i = 0; i < 16384; i++) {
    randomNumbersPool[i] = randomNumbers[i] / 4294967295;  // Assigns random numbers between 0 to 1
  }
}

/*
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

var num = randomPool.splice(0,1) was chosen over randomPool = randomPool.slice(1) because testing
showed it to be about thirty times faster with a for loop iterating through an array of size 10000.
*/
function getRandom() {
  if (randomNumbersPool[0] === undefined) {
    generateRandom();
  }
  
  // Takes index 0 value of the size 1 array that is returned by .splice() 
  var randomNumber = randomPool.splice(0,1)[0];
  return randomNumber;
}
